<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
    
    public function getAdverts($page, $nbPerPage) {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->orderBy('a.date', 'DESC')
            ->getQuery()
        ;
        
        $query
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage)
        ;
        
        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }
        
    
    public function findAll() {
        
        //Méthode 1 : En passant par l'EntityManager
        $queryBuilder = $this->_em->createQueryBuilder()
                ->select('a')
                ->from($this->_entityName, 'a')
        ;
        // Dans un repository, $this->_entityName est le namespace de l'entité gérée
        // Ici, il vaut donc OC\PlatformBundle\Entity\Advert
        
        
        //Méthode 2 : en passant par le raccourci
        $queryBuilder = $this->createQueryBuilder('a');
        
        //On récupère le query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        //On récupère les resultats à partir de la query
        $results = $query->getResult();
        
        return $results;
        
        

        
        
    }

    public function findByOne($id) {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.id = :id')
            ->setParameter('id', $id)
        ;
        
        return $qb
                ->getQuery()
                ->getResult()
        ;
    }
    
    public function findByAuthorAndDate($author, $year) {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.author = :author')
                ->setParameter('author', $author)
           ->andWhere('a.date < :year')
                ->setParameter('year', $year)
           ->orderBy('a.date', 'DESC')
        ;
        
        return $qb
                ->getQuery()
                ->getResult()
        ;
    }
    
    public function whereCurrentYear(QuerryBuilder $qb) {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameters('start', DateTime(date('Y').'-01-01')) //Date entre le 1er janvier de cette année
            ->setParameters('end'  , DateTime(date('Y').'-12-31')) //Et le 31 décembre de cette année
        ;
                
    }
    
    public function getAdvertWithCategories(array $categoryNames){
        
        $qb = $this->createQueryBuilder('a');
        $qb
                ->innerJoin('a.categories', 'c')
                ->addSelect('c')
        ;
        
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        
        return $qb
                ->getQuery()
                ->getResult()
        ;
        
    }
    
    public function getApplicationsWithAdvert($limit) {
        
        $qb = $this->createQueryBuilder('a');
        $qb
                ->innerJoin('a.advert', 'adv')
                ->addSelect('adv')
        ;
        
        $qb->setMaxResults($limit);
        
        return $qb
                ->getQuery()
                ->getResult()
        ;
        
    }
    
    
    
}

